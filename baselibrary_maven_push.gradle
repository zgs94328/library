//支持将项目发布到maven仓库的插件
apply plugin: 'maven'
//支持对库文件数字签名的插件，可以通过签名知道文件的创建者，创建时间等信息
apply plugin: 'signing'

//声明变量记录上传Maven库地址
def repositoryUrl
//判断发到正式库还是snapshot库
if (isReleaseBuild()) {
    println 'Release Build'
    //上传Release私有仓库
    repositoryUrl = "http://127.0.0.1:8081/repository/maven-releases/"
} else {
    println 'Debug Build'
    //上传snapshot私有仓库
    repositoryUrl = "http://127.0.0.1:8081/repository/maven-snapshots/"
}

//从项目gradle.properties中读取Nexus服务器登录用户名
def getRepositoryUserName() {
    return hasProperty('NEXUS_USERNAME') ? rootProject.ext.NEXUS_USERNAME : ""
}
//读取Nexus服务器登录密码
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? rootProject.ext.NEXUS_PASSWORD : ""
}
//通过VERSION_NAME常量判断是否是Release版本
def isReleaseBuild() {
    return !rootProject.ext.baselibrary_pom["VERSION_NAME"].contains("SNAPSHOT")
}

//配置阶段要结束，项目评估完会走到这一步
afterEvaluate { project ->
    //声明上传Maven的Task
    uploadArchives {
        repositories {
            mavenDeployer {
                //签名POM
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                //构件标识符
                pom.artifactId = rootProject.ext.baselibrary_pom["POM_ARTIFACT_ID"]
                //全球唯一标识符
                pom.groupId = rootProject.ext.baselibrary_pom["POM_GROUP_ID"]
                //构件版本
                pom.version = rootProject.ext.baselibrary_pom["VERSION_NAME"]

                //用户名和密码授权验证
                repository(url: repositoryUrl) {
                    authentication(userName: getRepositoryUserName(), password: getRepositoryPassword())
                }

                //配置pom.xml
                pom.project {
                    //库名称
                    name rootProject.ext.baselibrary_pom["POM_NAME"]
                    //打包下载上传的格式
                    packaging rootProject.ext.baselibrary_pom["POM_PACKAGING"]
                    //描述信息
                    description rootProject.ext.baselibrary_pom["POM_DESCRIPTION"]
                    //项目地址
                    url POM_URL
                    //scm(software configuration management)标签允许你配置你的代码库
                    //不用SCM可忽略，随意配置
                    scm {
                        url rootProject.ext.POM_SCM_URL
                        connection rootProject.ext.POM_SCM_CONNECTION
                        developerConnection rootProject.ext.POM_SCM_DEV_CONNECTION
                    }
                    //软件许可证书信息
                    licenses {
                        license {
                            //license用于法律上的名称
                            name rootProject.ext.POM_LICENCE_NAME
                            //官方的license正文页面的URL
                            url rootProject.ext.POM_LICENCE_URL
                            //<!--项目分发的主要方式： repo，可以从Maven库下载
                            //manual， 用户必须手动下载和安装依赖-->
                            distribution rootProject.ext.POM_LICENCE_DIST
                        }
                    }
                    //开发者信息
                    developers {
                        developer {
                            id rootProject.ext.POM_DEVELOPER_ID
                            name rootProject.ext.POM_DEVELOPER_NAME
                        }
                    }
                }
            }

        }
    }

    // 进行数字签名
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    // type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
    task androidJavadocs(type: Javadoc) {
        // 设置源码所在的位置
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    // 生成javadoc.jar
    task androidJavadocsJar(type: Jar) {
        // 指定文档名称
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    // 生成sources.jar
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
//解决 JavaDoc 中文注释生成失败的问题
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', 'quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }
    // 产生相关配置文件的任务
    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}




